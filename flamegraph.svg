<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="2964"><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1350%" y="469" width="0.0337%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.3850%" y="479.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&lt;&amp;f64&gt;&gt;::add (36 samples, 1.21%)</title><rect x="44.8043%" y="181" width="1.2146%" height="15" fill="rgb(217,0,24)" fg:x="1328" fg:w="36"/><text x="45.0543%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (32 samples, 1.08%)</title><rect x="44.9393%" y="165" width="1.0796%" height="15" fill="rgb(221,193,54)" fg:x="1332" fg:w="32"/><text x="45.1893%" y="175.50"></text></g><g><title>&lt;xor::value::Value as core::convert::From&lt;bool&gt;&gt;::from (45 samples, 1.52%)</title><rect x="46.0189%" y="165" width="1.5182%" height="15" fill="rgb(248,212,6)" fg:x="1364" fg:w="45"/><text x="46.2689%" y="175.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (91 samples, 3.07%)</title><rect x="46.0189%" y="181" width="3.0702%" height="15" fill="rgb(208,68,35)" fg:x="1364" fg:w="91"/><text x="46.2689%" y="191.50">&lt;T ..</text></g><g><title>&lt;xor::value::Value as core::convert::From&lt;f64&gt;&gt;::from (46 samples, 1.55%)</title><rect x="47.5371%" y="165" width="1.5520%" height="15" fill="rgb(232,128,0)" fg:x="1409" fg:w="46"/><text x="47.7871%" y="175.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (497 samples, 16.77%)</title><rect x="49.0891%" y="181" width="16.7679%" height="15" fill="rgb(207,160,47)" fg:x="1455" fg:w="497"/><text x="49.3391%" y="191.50">&lt;T as core::convert::TryIn..</text></g><g><title>xor::value::&lt;impl core::convert::TryFrom&lt;xor::value::Value&gt; for f64&gt;::try_from (396 samples, 13.36%)</title><rect x="52.4966%" y="165" width="13.3603%" height="15" fill="rgb(228,23,34)" fg:x="1556" fg:w="396"/><text x="52.7466%" y="175.50">xor::value::&lt;impl co..</text></g><g><title>alloc::rc::Rc&lt;T&gt;::inner (8 samples, 0.27%)</title><rect x="65.9244%" y="165" width="0.2699%" height="15" fill="rgb(218,30,26)" fg:x="1954" fg:w="8"/><text x="66.1744%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (8 samples, 0.27%)</title><rect x="65.9244%" y="149" width="0.2699%" height="15" fill="rgb(220,122,19)" fg:x="1954" fg:w="8"/><text x="66.1744%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (21 samples, 0.71%)</title><rect x="65.8570%" y="181" width="0.7085%" height="15" fill="rgb(250,228,42)" fg:x="1952" fg:w="21"/><text x="66.1070%" y="191.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (11 samples, 0.37%)</title><rect x="66.1943%" y="165" width="0.3711%" height="15" fill="rgb(240,193,28)" fg:x="1962" fg:w="11"/><text x="66.4443%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (83 samples, 2.80%)</title><rect x="66.5655%" y="181" width="2.8003%" height="15" fill="rgb(216,20,37)" fg:x="1973" fg:w="83"/><text x="66.8155%" y="191.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (83 samples, 2.80%)</title><rect x="66.5655%" y="165" width="2.8003%" height="15" fill="rgb(206,188,39)" fg:x="1973" fg:w="83"/><text x="66.8155%" y="175.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (83 samples, 2.80%)</title><rect x="66.5655%" y="149" width="2.8003%" height="15" fill="rgb(217,207,13)" fg:x="1973" fg:w="83"/><text x="66.8155%" y="159.50">&lt;u..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (28 samples, 0.94%)</title><rect x="69.3657%" y="181" width="0.9447%" height="15" fill="rgb(231,73,38)" fg:x="2056" fg:w="28"/><text x="69.6157%" y="191.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_weak (13 samples, 0.44%)</title><rect x="71.8623%" y="149" width="0.4386%" height="15" fill="rgb(225,20,46)" fg:x="2130" fg:w="13"/><text x="72.1123%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.03%)</title><rect x="72.2672%" y="133" width="0.0337%" height="15" fill="rgb(210,31,41)" fg:x="2142" fg:w="1"/><text x="72.5172%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.03%)</title><rect x="72.2672%" y="117" width="0.0337%" height="15" fill="rgb(221,200,47)" fg:x="2142" fg:w="1"/><text x="72.5172%" y="127.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="72.2672%" y="101" width="0.0337%" height="15" fill="rgb(226,26,5)" fg:x="2142" fg:w="1"/><text x="72.5172%" y="111.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="72.2672%" y="85" width="0.0337%" height="15" fill="rgb(249,33,26)" fg:x="2142" fg:w="1"/><text x="72.5172%" y="95.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.51%)</title><rect x="71.8623%" y="165" width="0.5061%" height="15" fill="rgb(235,183,28)" fg:x="2130" fg:w="15"/><text x="72.1123%" y="175.50"></text></g><g><title>alloc::rc::Weak&lt;T&gt;::inner (2 samples, 0.07%)</title><rect x="72.3009%" y="149" width="0.0675%" height="15" fill="rgb(221,5,38)" fg:x="2143" fg:w="2"/><text x="72.5509%" y="159.50"></text></g><g><title>alloc::rc::is_dangling (2 samples, 0.07%)</title><rect x="72.3009%" y="133" width="0.0675%" height="15" fill="rgb(247,18,42)" fg:x="2143" fg:w="2"/><text x="72.5509%" y="143.50"></text></g><g><title>&lt;xor::value::Value as core::clone::Clone&gt;::clone (68 samples, 2.29%)</title><rect x="70.3104%" y="181" width="2.2942%" height="15" fill="rgb(241,131,45)" fg:x="2084" fg:w="68"/><text x="70.5604%" y="191.50">&lt;..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (7 samples, 0.24%)</title><rect x="72.3684%" y="165" width="0.2362%" height="15" fill="rgb(249,31,29)" fg:x="2145" fg:w="7"/><text x="72.6184%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (8 samples, 0.27%)</title><rect x="72.6046%" y="181" width="0.2699%" height="15" fill="rgb(225,111,53)" fg:x="2152" fg:w="8"/><text x="72.8546%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (17 samples, 0.57%)</title><rect x="75.0000%" y="165" width="0.5735%" height="15" fill="rgb(238,160,17)" fg:x="2223" fg:w="17"/><text x="75.2500%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (17 samples, 0.57%)</title><rect x="75.0000%" y="149" width="0.5735%" height="15" fill="rgb(214,148,48)" fg:x="2223" fg:w="17"/><text x="75.2500%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="75.5735%" y="165" width="0.0337%" height="15" fill="rgb(232,36,49)" fg:x="2240" fg:w="1"/><text x="75.8235%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="75.5735%" y="149" width="0.0337%" height="15" fill="rgb(209,103,24)" fg:x="2240" fg:w="1"/><text x="75.8235%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (304 samples, 10.26%)</title><rect x="72.8745%" y="181" width="10.2564%" height="15" fill="rgb(229,88,8)" fg:x="2160" fg:w="304"/><text x="73.1245%" y="191.50">alloc::vec::Vec..</text></g><g><title>core::ptr::write (223 samples, 7.52%)</title><rect x="75.6073%" y="165" width="7.5236%" height="15" fill="rgb(213,181,19)" fg:x="2241" fg:w="223"/><text x="75.8573%" y="175.50">core::ptr:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (68 samples, 2.29%)</title><rect x="83.1309%" y="181" width="2.2942%" height="15" fill="rgb(254,191,54)" fg:x="2464" fg:w="68"/><text x="83.3809%" y="191.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;[xor::value::Value]&gt; (30 samples, 1.01%)</title><rect x="84.4130%" y="165" width="1.0121%" height="15" fill="rgb(241,83,37)" fg:x="2502" fg:w="30"/><text x="84.6630%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;xor::value::Value&gt; (18 samples, 0.61%)</title><rect x="84.8178%" y="149" width="0.6073%" height="15" fill="rgb(233,36,39)" fg:x="2514" fg:w="18"/><text x="85.0678%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Weak&lt;xor::value::Function&gt;&gt; (8 samples, 0.27%)</title><rect x="85.1552%" y="133" width="0.2699%" height="15" fill="rgb(226,3,54)" fg:x="2524" fg:w="8"/><text x="85.4052%" y="143.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.27%)</title><rect x="85.1552%" y="117" width="0.2699%" height="15" fill="rgb(245,192,40)" fg:x="2524" fg:w="8"/><text x="85.4052%" y="127.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_weak (8 samples, 0.27%)</title><rect x="85.1552%" y="101" width="0.2699%" height="15" fill="rgb(238,167,29)" fg:x="2524" fg:w="8"/><text x="85.4052%" y="111.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (8 samples, 0.27%)</title><rect x="85.1552%" y="85" width="0.2699%" height="15" fill="rgb(232,182,51)" fg:x="2524" fg:w="8"/><text x="85.4052%" y="95.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (8 samples, 0.27%)</title><rect x="85.1552%" y="69" width="0.2699%" height="15" fill="rgb(231,60,39)" fg:x="2524" fg:w="8"/><text x="85.4052%" y="79.50"></text></g><g><title>core::mem::replace (8 samples, 0.27%)</title><rect x="85.1552%" y="53" width="0.2699%" height="15" fill="rgb(208,69,12)" fg:x="2524" fg:w="8"/><text x="85.4052%" y="63.50"></text></g><g><title>core::ptr::write (8 samples, 0.27%)</title><rect x="85.1552%" y="37" width="0.2699%" height="15" fill="rgb(235,93,37)" fg:x="2524" fg:w="8"/><text x="85.4052%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;xor::value::Function&gt;&gt; (24 samples, 0.81%)</title><rect x="85.4251%" y="181" width="0.8097%" height="15" fill="rgb(213,116,39)" fg:x="2532" fg:w="24"/><text x="85.6751%" y="191.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.81%)</title><rect x="85.4251%" y="165" width="0.8097%" height="15" fill="rgb(222,207,29)" fg:x="2532" fg:w="24"/><text x="85.6751%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;xor::vm::CallFrame&gt;&gt; (6 samples, 0.20%)</title><rect x="86.2348%" y="181" width="0.2024%" height="15" fill="rgb(206,96,30)" fg:x="2556" fg:w="6"/><text x="86.4848%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;xor::vm::CallFrame&gt; (6 samples, 0.20%)</title><rect x="86.2348%" y="165" width="0.2024%" height="15" fill="rgb(218,138,4)" fg:x="2556" fg:w="6"/><text x="86.4848%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;xor::value::Function&gt;&gt; (6 samples, 0.20%)</title><rect x="86.2348%" y="149" width="0.2024%" height="15" fill="rgb(250,191,14)" fg:x="2556" fg:w="6"/><text x="86.4848%" y="159.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.20%)</title><rect x="86.2348%" y="133" width="0.2024%" height="15" fill="rgb(239,60,40)" fg:x="2556" fg:w="6"/><text x="86.4848%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;xor::value::Value&gt; (9 samples, 0.30%)</title><rect x="86.4372%" y="181" width="0.3036%" height="15" fill="rgb(206,27,48)" fg:x="2562" fg:w="9"/><text x="86.6872%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (10 samples, 0.34%)</title><rect x="86.7409%" y="181" width="0.3374%" height="15" fill="rgb(225,35,8)" fg:x="2571" fg:w="10"/><text x="86.9909%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (70 samples, 2.36%)</title><rect x="87.0783%" y="181" width="2.3617%" height="15" fill="rgb(250,213,24)" fg:x="2581" fg:w="70"/><text x="87.3283%" y="191.50">co..</text></g><g><title>xor::value::Value::is_falsey (9 samples, 0.30%)</title><rect x="89.4399%" y="181" width="0.3036%" height="15" fill="rgb(247,123,22)" fg:x="2651" fg:w="9"/><text x="89.6899%" y="191.50"></text></g><g><title>&lt;&amp;bool as core::ops::bit::Not&gt;::not (9 samples, 0.30%)</title><rect x="89.4399%" y="165" width="0.3036%" height="15" fill="rgb(231,138,38)" fg:x="2651" fg:w="9"/><text x="89.6899%" y="175.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.13%)</title><rect x="91.0594%" y="149" width="0.1350%" height="15" fill="rgb(231,145,46)" fg:x="2699" fg:w="4"/><text x="91.3094%" y="159.50"></text></g><g><title>alloc::rc::Weak&lt;T&gt;::upgrade (22 samples, 0.74%)</title><rect x="91.1943%" y="149" width="0.7422%" height="15" fill="rgb(251,118,11)" fg:x="2703" fg:w="22"/><text x="91.4443%" y="159.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (12 samples, 0.40%)</title><rect x="91.5317%" y="133" width="0.4049%" height="15" fill="rgb(217,147,25)" fg:x="2713" fg:w="12"/><text x="91.7817%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (12 samples, 0.40%)</title><rect x="91.5317%" y="117" width="0.4049%" height="15" fill="rgb(247,81,37)" fg:x="2713" fg:w="12"/><text x="91.7817%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.20%)</title><rect x="91.9366%" y="149" width="0.2024%" height="15" fill="rgb(209,12,38)" fg:x="2725" fg:w="6"/><text x="92.1866%" y="159.50"></text></g><g><title>xor::vm::VM::call_value (87 samples, 2.94%)</title><rect x="89.7436%" y="181" width="2.9352%" height="15" fill="rgb(227,1,9)" fg:x="2660" fg:w="87"/><text x="89.9936%" y="191.50">xo..</text></g><g><title>xor::vm::VM::call (87 samples, 2.94%)</title><rect x="89.7436%" y="165" width="2.9352%" height="15" fill="rgb(248,47,43)" fg:x="2660" fg:w="87"/><text x="89.9936%" y="175.50">xo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.54%)</title><rect x="92.1390%" y="149" width="0.5398%" height="15" fill="rgb(221,10,30)" fg:x="2731" fg:w="16"/><text x="92.3890%" y="159.50"></text></g><g><title>core::ptr::write (8 samples, 0.27%)</title><rect x="92.4089%" y="133" width="0.2699%" height="15" fill="rgb(210,229,1)" fg:x="2739" fg:w="8"/><text x="92.6589%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.37%)</title><rect x="92.7800%" y="165" width="0.3711%" height="15" fill="rgb(222,148,37)" fg:x="2750" fg:w="11"/><text x="93.0300%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.37%)</title><rect x="92.7800%" y="149" width="0.3711%" height="15" fill="rgb(234,67,33)" fg:x="2750" fg:w="11"/><text x="93.0300%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.37%)</title><rect x="92.7800%" y="133" width="0.3711%" height="15" fill="rgb(247,98,35)" fg:x="2750" fg:w="11"/><text x="93.0300%" y="143.50"></text></g><g><title>xor::vm::VM::peek_stack (36 samples, 1.21%)</title><rect x="92.6788%" y="181" width="1.2146%" height="15" fill="rgb(247,138,52)" fg:x="2747" fg:w="36"/><text x="92.9288%" y="191.50"></text></g><g><title>&lt;xor::value::Value as core::clone::Clone&gt;::clone (22 samples, 0.74%)</title><rect x="93.1511%" y="165" width="0.7422%" height="15" fill="rgb(213,79,30)" fg:x="2761" fg:w="22"/><text x="93.4011%" y="175.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.30%)</title><rect x="93.5897%" y="149" width="0.3036%" height="15" fill="rgb(246,177,23)" fg:x="2774" fg:w="9"/><text x="93.8397%" y="159.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_weak (9 samples, 0.30%)</title><rect x="93.5897%" y="133" width="0.3036%" height="15" fill="rgb(230,62,27)" fg:x="2774" fg:w="9"/><text x="93.8397%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (9 samples, 0.30%)</title><rect x="93.5897%" y="117" width="0.3036%" height="15" fill="rgb(216,154,8)" fg:x="2774" fg:w="9"/><text x="93.8397%" y="127.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (9 samples, 0.30%)</title><rect x="93.5897%" y="101" width="0.3036%" height="15" fill="rgb(244,35,45)" fg:x="2774" fg:w="9"/><text x="93.8397%" y="111.50"></text></g><g><title>core::mem::replace (9 samples, 0.30%)</title><rect x="93.5897%" y="85" width="0.3036%" height="15" fill="rgb(251,115,12)" fg:x="2774" fg:w="9"/><text x="93.8397%" y="95.50"></text></g><g><title>core::ptr::write (9 samples, 0.30%)</title><rect x="93.5897%" y="69" width="0.3036%" height="15" fill="rgb(240,54,50)" fg:x="2774" fg:w="9"/><text x="93.8397%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (18 samples, 0.61%)</title><rect x="95.3779%" y="149" width="0.6073%" height="15" fill="rgb(233,84,52)" fg:x="2827" fg:w="18"/><text x="95.6279%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (18 samples, 0.61%)</title><rect x="95.3779%" y="133" width="0.6073%" height="15" fill="rgb(207,117,47)" fg:x="2827" fg:w="18"/><text x="95.6279%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.10%)</title><rect x="95.9852%" y="149" width="0.1012%" height="15" fill="rgb(249,43,39)" fg:x="2845" fg:w="3"/><text x="96.2352%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.10%)</title><rect x="95.9852%" y="133" width="0.1012%" height="15" fill="rgb(209,38,44)" fg:x="2845" fg:w="3"/><text x="96.2352%" y="143.50"></text></g><g><title>xor::vm::VM::pop_stack (102 samples, 3.44%)</title><rect x="93.8934%" y="181" width="3.4413%" height="15" fill="rgb(236,212,23)" fg:x="2783" fg:w="102"/><text x="94.1434%" y="191.50">xor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (98 samples, 3.31%)</title><rect x="94.0283%" y="165" width="3.3063%" height="15" fill="rgb(242,79,21)" fg:x="2787" fg:w="98"/><text x="94.2783%" y="175.50">all..</text></g><g><title>core::ptr::read (37 samples, 1.25%)</title><rect x="96.0864%" y="149" width="1.2483%" height="15" fill="rgb(211,96,35)" fg:x="2848" fg:w="37"/><text x="96.3364%" y="159.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (37 samples, 1.25%)</title><rect x="96.0864%" y="133" width="1.2483%" height="15" fill="rgb(253,215,40)" fg:x="2848" fg:w="37"/><text x="96.3364%" y="143.50"></text></g><g><title>xor::vm::VM::read (21 samples, 0.71%)</title><rect x="97.3347%" y="181" width="0.7085%" height="15" fill="rgb(211,81,21)" fg:x="2885" fg:w="21"/><text x="97.5847%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="97.9757%" y="165" width="0.0675%" height="15" fill="rgb(208,190,38)" fg:x="2904" fg:w="2"/><text x="98.2257%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="97.9757%" y="149" width="0.0675%" height="15" fill="rgb(235,213,38)" fg:x="2904" fg:w="2"/><text x="98.2257%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="97.9757%" y="133" width="0.0675%" height="15" fill="rgb(237,122,38)" fg:x="2904" fg:w="2"/><text x="98.2257%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.30%)</title><rect x="98.5155%" y="165" width="0.3036%" height="15" fill="rgb(244,218,35)" fg:x="2920" fg:w="9"/><text x="98.7655%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.30%)</title><rect x="98.5155%" y="149" width="0.3036%" height="15" fill="rgb(240,68,47)" fg:x="2920" fg:w="9"/><text x="98.7655%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.30%)</title><rect x="98.5155%" y="133" width="0.3036%" height="15" fill="rgb(210,16,53)" fg:x="2920" fg:w="9"/><text x="98.7655%" y="143.50"></text></g><g><title>__libc_start_main (2,956 samples, 99.73%)</title><rect x="0.1687%" y="469" width="99.7301%" height="15" fill="rgb(235,124,12)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="479.50">__libc_start_main</text></g><g><title>main (2,956 samples, 99.73%)</title><rect x="0.1687%" y="453" width="99.7301%" height="15" fill="rgb(224,169,11)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="463.50">main</text></g><g><title>std::rt::lang_start_internal (2,956 samples, 99.73%)</title><rect x="0.1687%" y="437" width="99.7301%" height="15" fill="rgb(250,166,2)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="447.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,956 samples, 99.73%)</title><rect x="0.1687%" y="421" width="99.7301%" height="15" fill="rgb(242,216,29)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,956 samples, 99.73%)</title><rect x="0.1687%" y="405" width="99.7301%" height="15" fill="rgb(230,116,27)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,956 samples, 99.73%)</title><rect x="0.1687%" y="389" width="99.7301%" height="15" fill="rgb(228,99,48)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="399.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,956 samples, 99.73%)</title><rect x="0.1687%" y="373" width="99.7301%" height="15" fill="rgb(253,11,6)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="383.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,956 samples, 99.73%)</title><rect x="0.1687%" y="357" width="99.7301%" height="15" fill="rgb(247,143,39)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="367.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,956 samples, 99.73%)</title><rect x="0.1687%" y="341" width="99.7301%" height="15" fill="rgb(236,97,10)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="351.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,956 samples, 99.73%)</title><rect x="0.1687%" y="325" width="99.7301%" height="15" fill="rgb(233,208,19)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="335.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,956 samples, 99.73%)</title><rect x="0.1687%" y="309" width="99.7301%" height="15" fill="rgb(216,164,2)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="319.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,956 samples, 99.73%)</title><rect x="0.1687%" y="293" width="99.7301%" height="15" fill="rgb(220,129,5)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="303.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,956 samples, 99.73%)</title><rect x="0.1687%" y="277" width="99.7301%" height="15" fill="rgb(242,17,10)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="287.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,956 samples, 99.73%)</title><rect x="0.1687%" y="261" width="99.7301%" height="15" fill="rgb(242,107,0)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="271.50">core::ops::function::FnOnce::call_once</text></g><g><title>xor::main (2,956 samples, 99.73%)</title><rect x="0.1687%" y="245" width="99.7301%" height="15" fill="rgb(251,28,31)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="255.50">xor::main</text></g><g><title>xor::run_file (2,956 samples, 99.73%)</title><rect x="0.1687%" y="229" width="99.7301%" height="15" fill="rgb(233,223,10)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="239.50">xor::run_file</text></g><g><title>xor::vm::VM::interpret (2,956 samples, 99.73%)</title><rect x="0.1687%" y="213" width="99.7301%" height="15" fill="rgb(215,21,27)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="223.50">xor::vm::VM::interpret</text></g><g><title>xor::vm::VM::run (2,956 samples, 99.73%)</title><rect x="0.1687%" y="197" width="99.7301%" height="15" fill="rgb(232,23,21)" fg:x="5" fg:w="2956"/><text x="0.4187%" y="207.50">xor::vm::VM::run</text></g><g><title>xor::vm::VM::read_constant (55 samples, 1.86%)</title><rect x="98.0432%" y="181" width="1.8556%" height="15" fill="rgb(244,5,23)" fg:x="2906" fg:w="55"/><text x="98.2932%" y="191.50">x..</text></g><g><title>&lt;xor::value::Value as core::clone::Clone&gt;::clone (32 samples, 1.08%)</title><rect x="98.8192%" y="165" width="1.0796%" height="15" fill="rgb(226,81,46)" fg:x="2929" fg:w="32"/><text x="99.0692%" y="175.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (9 samples, 0.30%)</title><rect x="99.5951%" y="149" width="0.3036%" height="15" fill="rgb(247,70,30)" fg:x="2952" fg:w="9"/><text x="99.8451%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.8988%" y="453" width="0.0337%" height="15" fill="rgb(212,68,19)" fg:x="2961" fg:w="1"/><text x="100.1488%" y="463.50"></text></g><g><title>_dl_debug_initialize (1 samples, 0.03%)</title><rect x="99.9325%" y="421" width="0.0337%" height="15" fill="rgb(240,187,13)" fg:x="2962" fg:w="1"/><text x="100.1825%" y="431.50"></text></g><g><title>all (2,964 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="2964"/><text x="0.2500%" y="527.50"></text></g><g><title>xor (2,964 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="2964"/><text x="0.2500%" y="511.50">xor</text></g><g><title>_start (2,964 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="2964"/><text x="0.2500%" y="495.50">_start</text></g><g><title>_dl_start (3 samples, 0.10%)</title><rect x="99.8988%" y="469" width="0.1012%" height="15" fill="rgb(247,173,49)" fg:x="2961" fg:w="3"/><text x="100.1488%" y="479.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.07%)</title><rect x="99.9325%" y="453" width="0.0675%" height="15" fill="rgb(224,114,35)" fg:x="2962" fg:w="2"/><text x="100.1825%" y="463.50"></text></g><g><title>dl_main (2 samples, 0.07%)</title><rect x="99.9325%" y="437" width="0.0675%" height="15" fill="rgb(245,159,27)" fg:x="2962" fg:w="2"/><text x="100.1825%" y="447.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.03%)</title><rect x="99.9663%" y="421" width="0.0337%" height="15" fill="rgb(245,172,44)" fg:x="2963" fg:w="1"/><text x="100.2163%" y="431.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.03%)</title><rect x="99.9663%" y="405" width="0.0337%" height="15" fill="rgb(236,23,11)" fg:x="2963" fg:w="1"/><text x="100.2163%" y="415.50"></text></g><g><title>do_lookup_x (1 samples, 0.03%)</title><rect x="99.9663%" y="389" width="0.0337%" height="15" fill="rgb(205,117,38)" fg:x="2963" fg:w="1"/><text x="100.2163%" y="399.50"></text></g></svg></svg>